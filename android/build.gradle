android {
    buildToolsVersion "29.0.3"
    compileSdkVersion 30
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            jniLibs.srcDirs = ['libs']
        }
        lite {
            assets.srcDirs = ['assetsFull']
            res.srcDirs = ['resLite']
        }
        main.assets.filter.exclude '**/tts/*.*'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        return void
    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        return void
    }
    defaultConfig {
        applicationId "com.bombbird.terminalcontrollite"
        minSdkVersion 21
        targetSdkVersion 30
        ext {
            versionCode project.versionCode
            versionName project.version.toString()
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        lite {
            dimension "version"
        }
    }

    lintOptions {
        abortOnError false
        return void
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('assemble') || task.name.contains('bundle')) {
        if (task.name.contains('Lite')) {
            task.dependsOn checkVersionLiteFullAssets
        }
    }
}

//Called before build to check that version information in internal game files are correct for each version
task checkVersionLiteFullAssets() {
    doLast {
        String gradleVersion = android.defaultConfig.versionName
        String gradleVersionCode = android.defaultConfig.versionCode

        def text2 = project.file("../android/assetsFull/game/type.type").text
        def values2 = text2.split(' ')
        if (values2.size() < 2) {
            throw new GradleException("Lite version (full assets): Type string length is " + values2.size() + ", needs 2")
        }
        if ((values2[0] != gradleVersion) || (values2[1] != gradleVersionCode)) {
            throw new GradleException("Lite version (full assets): " + values2[0] + " code " + values2[1] + " not equal to Gradle's " + gradleVersion + " code " + gradleVersionCode)
        }
        println "Lite version (full assets) check successful"
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs()
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86/").mkdirs()
    file("libs/x86_64/").mkdirs()

    configurations.getByName("natives").copy().files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.bombbird.terminalcontrol/com.bombbird.terminalcontrol.AndroidLauncher'
}

dependencies {
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src")
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance()
                builder.current = node
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}
