apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.bombbird.terminalcontrol.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assetsFull")

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

//Called before build to check that version information in internal game files are correct for each version
task checkVersionFull() {
    doLast {
        String gradleVersion = project.version
        String gradleVersionCode = project.versionCode

        def text = project.file("../android/assetsFull/game/type.type").text
        def values = text.split(' ')
        if (values[0] != "full") {
            throw new GradleException("Incorrect type for full version: " + values[0])
        }
        if (values.size() < 3) {
            throw new GradleException("Full version: Type string length is " + values.size() + ", needs 3")
        }
        if ((values[1] != gradleVersion) || (values[2] != gradleVersionCode)) {
            throw new GradleException("Full version: " + values[0] + " " + values[1] + " code " + values[2] + " not equal to Gradle's " + gradleVersion + " code " + gradleVersionCode)
        }
        println "Full version check successful"
    }
}

task checkVersionLite() {
    doLast {
        String gradleVersion = project.version
        String gradleVersionCode = project.versionCode

        def text2 = project.file("../android/assetsLite/game/type.type").text
        def values2 = text2.split(' ')
        if (values2[0] != "lite") {
            throw new GradleException("Incorrect type for lite version: " + values2[0])
        }
        if (values2.size() < 3) {
            throw new GradleException("Lite version: Type string length is " + values2.size() + ", needs 3")
        }
        if ((values2[1] != gradleVersion) || (values2[2] != gradleVersionCode)) {
            throw new GradleException("Lite version: " + values2[0] + " " + values2[1] + " code " + values2[2] + " not equal to Gradle's " + gradleVersion + " code " + gradleVersionCode)
        }
        println "Lite version check successful"
    }
}

task distLite(type: Jar) {
    project.ext.assetsDir = new File("../android/assetsLite")
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

distLite.dependsOn classes, checkVersionLite

task distFull(type: Jar) {
    project.ext.assetsDir = new File("../android/assetsFull")
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

distFull.dependsOn classes, checkVersionFull
